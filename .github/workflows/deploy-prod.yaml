name: Yolo Deploy Prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string

    secrets:
      EC2_SSH_KEY:
        required: true
      YOLO_EC2_IP_PROD:
        required: true
      S3_BUCKET_NAME_PROD:
        required: true
      AWS_REGION:
        required: true
      POLYBOT_CALLBACK_URL_PROD:   # ✅ Used as POLYBOT_URL
        required: true
      SQS_QUEUE_URL:               # ✅ Used for SQS_QUEUE_URL and YOLO_SQS_QUEUE_URL_DEV
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download image name artifact (fallback)
        uses: actions/download-artifact@v4
        with:
          name: image-name
          path: ./
        continue-on-error: true

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Determine image name
        id: get-image
        run: |
          if [ -n "${{ inputs.image }}" ]; then
            IMAGE_NAME="${{ inputs.image }}"
            echo "✅ Using input image: $IMAGE_NAME"
          elif [ -f "image_name.txt" ]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "✅ Using artifact image: $IMAGE_NAME"
          else
            echo "❌ No image name found!"
            exit 1
          fi
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Create .env file
        run: |
          echo "IMG_NAME=${{ steps.get-image.outputs.image }}" > .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_PROD }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "POLYBOT_URL=http://10.0.0.50:8443" >> .env

          echo "SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}" >> .env
          echo "YOLO_SQS_QUEUE_URL_DEV=${{ secrets.SQS_QUEUE_URL }}" >> .env
          echo "DYNAMODB_TABLE_NAME=deema-PolybotPredictions-prod" >> .env
          echo "STORAGE_TYPE=dynamodb" >> .env
          cat .env

      - name: SSH and deploy to YOLO Prod
        run: |
          echo "📁 Ensure remote dir exists"
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.YOLO_EC2_IP_PROD }} "mkdir -p /home/ubuntu/YoloService"

          echo "📤 Copying .env.prod"
          scp -i key.pem -o StrictHostKeyChecking=no .env.prod ubuntu@${{ secrets.YOLO_EC2_IP_PROD }}:/home/ubuntu/YoloService/.env.prod

          echo "🚀 SSH into EC2 and deploy"
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.YOLO_EC2_IP_PROD }} << EOF
            cd /home/ubuntu/YoloService

            if [ -d ".git" ]; then
              echo "💾 Stashing local changes"
              git stash save "Pre-deploy stash"
              echo "⬇️ Pulling latest code"
              git pull origin main
              echo "🔁 Re-applying stashed changes"
              git stash pop || echo "⚠️ Nothing to re-apply"
            else
              git clone --branch main https://github.com/${{ github.repository }} .
            fi
          
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d --remove-orphans

            echo "🔍 YOLO Health check"
            curl -s http://localhost:8080/health 

            echo "📊 OpenTelemetry Metrics check"
            if curl -s http://localhost:8889/metrics | grep -q 'system_cpu_time'; then
              echo "✅ OpenTelemetry metrics available"
            else
              docker logs \$(docker ps -qf "name=otelcol") || echo "No otelcol container"
            fi
          EOF
